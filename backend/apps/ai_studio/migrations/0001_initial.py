# Generated by Django 5.2.5 on 2025-08-08 20:09

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MLModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('model_type', models.CharField(choices=[('CLASSIFICATION', 'Classification'), ('REGRESSION', 'Regression'), ('ENSEMBLE', 'Ensemble'), ('NEURAL_NETWORK', 'Neural Network'), ('RULE_BASED', 'Rule Based')], default='CLASSIFICATION', max_length=50)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('TRAINING', 'Training'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('PUBLISHED', 'Published'), ('ARCHIVED', 'Archived')], default='DRAFT', max_length=20)),
                ('features', models.JSONField(default=list, help_text='List of features used for training')),
                ('target_variable', models.CharField(default='signal_type', max_length=100)),
                ('training_parameters', models.JSONField(default=dict, help_text='Training hyperparameters')),
                ('training_period_days', models.IntegerField(default=365, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(3650)])),
                ('validation_split', models.FloatField(default=0.2, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(0.5)])),
                ('model_file_path', models.CharField(blank=True, max_length=500, null=True)),
                ('training_results', models.JSONField(default=dict, help_text='Training metrics and results')),
                ('feature_importance', models.JSONField(default=dict, help_text='SHAP feature importance values')),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('precision', models.FloatField(blank=True, null=True)),
                ('recall', models.FloatField(blank=True, null=True)),
                ('f1_score', models.FloatField(blank=True, null=True)),
                ('auc_roc', models.FloatField(blank=True, null=True)),
                ('backtest_results', models.JSONField(default=dict, help_text='Backtest performance metrics')),
                ('total_return', models.FloatField(blank=True, null=True)),
                ('sharpe_ratio', models.FloatField(blank=True, null=True)),
                ('sortino_ratio', models.FloatField(blank=True, null=True)),
                ('max_drawdown', models.FloatField(blank=True, null=True)),
                ('win_rate', models.FloatField(blank=True, null=True)),
                ('is_published', models.BooleanField(default=False)),
                ('monthly_lease_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('total_leases', models.IntegerField(default=0)),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('training_started_at', models.DateTimeField(blank=True, null=True)),
                ('training_completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ml_models', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'ML Model',
                'verbose_name_plural': 'ML Models',
                'db_table': 'ai_studio_mlmodel',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrainingJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('QUEUED', 'Queued'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled')], default='QUEUED', max_length=20)),
                ('celery_task_id', models.CharField(blank=True, max_length=255, null=True)),
                ('progress_percentage', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('current_step', models.CharField(blank=True, max_length=200)),
                ('total_steps', models.IntegerField(default=1)),
                ('result_data', models.JSONField(default=dict)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('training_logs', models.TextField(blank=True, null=True)),
                ('queued_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_jobs', to='ai_studio.mlmodel')),
            ],
            options={
                'verbose_name': 'Training Job',
                'verbose_name_plural': 'Training Jobs',
                'db_table': 'ai_studio_trainingjob',
                'ordering': ['-queued_at'],
            },
        ),
        migrations.CreateModel(
            name='ModelLeasing',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('lease_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('platform_commission', models.DecimalField(decimal_places=2, max_digits=10)),
                ('creator_earnings', models.DecimalField(decimal_places=2, max_digits=10)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('EXPIRED', 'Expired'), ('CANCELLED', 'Cancelled'), ('SUSPENDED', 'Suspended')], default='ACTIVE', max_length=20)),
                ('payment_id', models.CharField(blank=True, max_length=200, null=True)),
                ('payment_status', models.CharField(default='pending', max_length=50)),
                ('total_signals_generated', models.IntegerField(default=0)),
                ('trades_executed', models.IntegerField(default=0)),
                ('performance_metrics', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lessee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leased_models', to=settings.AUTH_USER_MODEL)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leases', to='ai_studio.mlmodel')),
            ],
            options={
                'verbose_name': 'Model Leasing',
                'verbose_name_plural': 'Model Leasings',
                'db_table': 'ai_studio_modelleasing',
                'unique_together': {('lessee', 'model', 'start_date')},
            },
        ),
        migrations.CreateModel(
            name='ModelReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(max_length=200)),
                ('comment', models.TextField()),
                ('actual_performance', models.JSONField(default=dict, help_text='Actual performance metrics experienced')),
                ('would_recommend', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='ai_studio.mlmodel')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='model_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Model Review',
                'verbose_name_plural': 'Model Reviews',
                'db_table': 'ai_studio_modelreview',
                'unique_together': {('model', 'reviewer')},
            },
        ),
    ]
