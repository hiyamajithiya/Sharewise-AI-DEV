# Generated by Django 5.1.5 on 2025-08-17 11:24

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('ai_studio', '0003_marketplaceearnings'),
        ('trading', '0003_tradingsignal_ai_justification_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TradingStrategy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('assigned_broker_account', models.CharField(blank=True, help_text='Broker account ID for trade execution', max_length=100)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('PAUSED', 'Paused'), ('STOPPED', 'Stopped')], default='PAUSED', max_length=20)),
                ('auto_execute', models.BooleanField(default=False, help_text='Auto-execute trades without user approval')),
                ('max_position_size', models.DecimalField(decimal_places=2, default=10000.0, max_digits=15)),
                ('max_daily_loss', models.DecimalField(decimal_places=2, default=5000.0, max_digits=15)),
                ('max_open_positions', models.PositiveIntegerField(default=5)),
                ('total_trades', models.IntegerField(default=0)),
                ('winning_trades', models.IntegerField(default=0)),
                ('total_pnl', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ml_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trading_strategies', to='ai_studio.mlmodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trading_strategies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Trading Strategy',
                'verbose_name_plural': 'Trading Strategies',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TradeApproval',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Approval'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('EXPIRED', 'Expired'), ('EXECUTED', 'Executed')], default='PENDING', max_length=20)),
                ('proposed_quantity', models.PositiveIntegerField()),
                ('proposed_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('proposed_broker_account', models.CharField(max_length=100)),
                ('approved_quantity', models.PositiveIntegerField(blank=True, null=True)),
                ('approved_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('expires_at', models.DateTimeField()),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('executed_at', models.DateTimeField(blank=True, null=True)),
                ('notification_sent', models.BooleanField(default=False)),
                ('reminder_sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('signal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='approval', to='trading.tradingsignal')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trade_approvals', to=settings.AUTH_USER_MODEL)),
                ('strategy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approvals', to='trading.tradingstrategy')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AutomatedTradeExecution',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('QUEUED', 'Queued for Execution'), ('EXECUTING', 'Executing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled')], default='QUEUED', max_length=20)),
                ('entry_executed_at', models.DateTimeField(blank=True, null=True)),
                ('exit_executed_at', models.DateTimeField(blank=True, null=True)),
                ('total_pnl', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('fees_paid', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('entry_order', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entry_execution', to='trading.tradingorder')),
                ('signal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='trading.tradingsignal')),
                ('stop_loss_order', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sl_execution', to='trading.tradingorder')),
                ('target_order', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='target_execution', to='trading.tradingorder')),
                ('approval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='trading.tradeapproval')),
                ('strategy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='trading.tradingstrategy')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PortfolioPosition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('symbol', models.CharField(max_length=50)),
                ('instrument_type', models.CharField(max_length=20)),
                ('position_type', models.CharField(choices=[('LONG', 'Long Position'), ('SHORT', 'Short Position')], max_length=10)),
                ('total_quantity', models.IntegerField(default=0)),
                ('available_quantity', models.IntegerField(default=0)),
                ('average_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('current_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('unrealized_pnl', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('realized_pnl', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('broker_positions', models.JSONField(default=dict, help_text='Breakdown by broker account')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='portfolio_positions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_updated'],
                'unique_together': {('user', 'symbol', 'instrument_type')},
            },
        ),
    ]
