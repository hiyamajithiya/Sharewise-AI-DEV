# Generated by Django 5.2.5 on 2025-08-11 07:51

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LiveMarketData',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('symbol', models.CharField(db_index=True, max_length=100)),
                ('instrument_type', models.CharField(choices=[('EQUITY', 'Equity'), ('FUTURES', 'Futures'), ('OPTIONS', 'Options'), ('INDEX', 'Index'), ('COMMODITY', 'Commodity'), ('CURRENCY', 'Currency')], max_length=20)),
                ('exchange', models.CharField(default='NSE', max_length=10)),
                ('last_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('change', models.DecimalField(decimal_places=2, max_digits=12)),
                ('change_percent', models.DecimalField(decimal_places=2, max_digits=6)),
                ('open_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('high_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('low_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('previous_close', models.DecimalField(decimal_places=2, max_digits=12)),
                ('volume', models.BigIntegerField(default=0)),
                ('value', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('bid_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('ask_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('bid_quantity', models.PositiveIntegerField(blank=True, null=True)),
                ('ask_quantity', models.PositiveIntegerField(blank=True, null=True)),
                ('underlying_symbol', models.CharField(blank=True, max_length=50)),
                ('strike_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('option_type', models.CharField(blank=True, max_length=4)),
                ('delta', models.DecimalField(blank=True, decimal_places=4, max_digits=8, null=True)),
                ('gamma', models.DecimalField(blank=True, decimal_places=4, max_digits=8, null=True)),
                ('theta', models.DecimalField(blank=True, decimal_places=4, max_digits=8, null=True)),
                ('vega', models.DecimalField(blank=True, decimal_places=4, max_digits=8, null=True)),
                ('implied_volatility', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('open_interest', models.BigIntegerField(blank=True, null=True)),
                ('open_interest_change', models.IntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(help_text='Market data timestamp')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_source', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'verbose_name': 'Live Market Data',
                'verbose_name_plural': 'Live Market Data',
                'db_table': 'live_market_data',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['symbol', '-timestamp'], name='live_market_symbol_fedb5c_idx'), models.Index(fields=['instrument_type', '-timestamp'], name='live_market_instrum_8853fa_idx'), models.Index(fields=['underlying_symbol', '-timestamp'], name='live_market_underly_e13828_idx')],
            },
        ),
        migrations.CreateModel(
            name='MarketDataCache',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('symbol', models.CharField(db_index=True, max_length=50)),
                ('data_type', models.CharField(choices=[('QUOTE', 'Stock Quote'), ('OPTIONS_CHAIN', 'Options Chain'), ('FUTURES_CHAIN', 'Futures Chain'), ('HISTORICAL', 'Historical Data'), ('INDICES', 'Index Data')], db_index=True, max_length=20)),
                ('data', models.JSONField(help_text='Cached market data')),
                ('expires_at', models.DateTimeField(help_text='Cache expiration time')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source_provider', models.CharField(blank=True, max_length=50)),
                ('cache_hits', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Market Data Cache',
                'verbose_name_plural': 'Market Data Cache',
                'db_table': 'market_data_cache',
                'indexes': [models.Index(fields=['symbol', 'data_type'], name='market_data_symbol_fb4505_idx'), models.Index(fields=['expires_at'], name='market_data_expires_3074d5_idx')],
                'unique_together': {('symbol', 'data_type')},
            },
        ),
        migrations.CreateModel(
            name='MarketDataLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('level', models.CharField(choices=[('INFO', 'Info'), ('WARNING', 'Warning'), ('ERROR', 'Error'), ('CRITICAL', 'Critical')], max_length=10)),
                ('message', models.TextField()),
                ('api_provider', models.CharField(blank=True, max_length=50)),
                ('endpoint', models.CharField(blank=True, max_length=200)),
                ('symbol', models.CharField(blank=True, max_length=50)),
                ('response_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('status_code', models.PositiveIntegerField(blank=True, null=True)),
                ('error_code', models.CharField(blank=True, max_length=50)),
                ('error_details', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Market Data Log',
                'verbose_name_plural': 'Market Data Logs',
                'db_table': 'market_data_log',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['level', '-created_at'], name='market_data_level_1dd816_idx'), models.Index(fields=['api_provider', '-created_at'], name='market_data_api_pro_50939e_idx')],
            },
        ),
        migrations.CreateModel(
            name='NSEAPIConfiguration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('provider', models.CharField(choices=[('NSE_OFFICIAL', 'NSE Official API'), ('ZERODHA_KITE', 'Zerodha Kite API'), ('ANGEL_BROKING', 'Angel Broking API'), ('UPSTOX', 'Upstox API'), ('ALPHA_VANTAGE', 'Alpha Vantage'), ('FINNHUB', 'Finnhub API')], default='NSE_OFFICIAL', max_length=50)),
                ('api_key', models.TextField(help_text='API Key for the provider')),
                ('api_secret', models.TextField(blank=True, help_text='API Secret (if required)')),
                ('access_token', models.TextField(blank=True, help_text='Access Token (if required)')),
                ('base_url', models.URLField(default='https://www.nseindia.com/api')),
                ('websocket_url', models.URLField(blank=True, help_text='WebSocket URL for real-time data')),
                ('rate_limit_per_minute', models.PositiveIntegerField(default=100, help_text='API calls per minute limit')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('ERROR', 'Error'), ('TESTING', 'Testing')], default='INACTIVE', max_length=20)),
                ('is_primary', models.BooleanField(default=False, help_text='Primary data source')),
                ('last_health_check', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('daily_api_calls', models.PositiveIntegerField(default=0)),
                ('monthly_api_calls', models.PositiveIntegerField(default=0)),
                ('last_reset_date', models.DateField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'NSE API Configuration',
                'verbose_name_plural': 'NSE API Configurations',
                'db_table': 'nse_api_configuration',
                'ordering': ['-is_primary', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WebSocketConnection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('connection_id', models.CharField(max_length=100, unique=True)),
                ('status', models.CharField(choices=[('CONNECTED', 'Connected'), ('DISCONNECTED', 'Disconnected'), ('RECONNECTING', 'Reconnecting'), ('ERROR', 'Error')], default='DISCONNECTED', max_length=20)),
                ('subscribed_symbols', models.JSONField(default=list)),
                ('connected_at', models.DateTimeField(blank=True, null=True)),
                ('disconnected_at', models.DateTimeField(blank=True, null=True)),
                ('last_ping', models.DateTimeField(blank=True, null=True)),
                ('error_count', models.PositiveIntegerField(default=0)),
                ('last_error', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ws_connections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'WebSocket Connection',
                'verbose_name_plural': 'WebSocket Connections',
                'db_table': 'websocket_connection',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='DataSubscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('subscription_type', models.CharField(choices=[('BASIC', 'Basic (15min delay)'), ('PREMIUM', 'Premium (Real-time)'), ('PROFESSIONAL', 'Professional (Real-time + L2)')], default='BASIC', max_length=20)),
                ('symbols', models.JSONField(default=list, help_text='List of subscribed symbols')),
                ('is_active', models.BooleanField(default=True)),
                ('max_symbols', models.PositiveIntegerField(default=100, help_text='Maximum symbols allowed')),
                ('real_time_enabled', models.BooleanField(default=False)),
                ('monthly_cost', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('last_billing_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Data Subscription',
                'verbose_name_plural': 'Data Subscriptions',
                'db_table': 'data_subscription',
                'unique_together': {('user',)},
            },
        ),
    ]
