import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Separator } from '@/components/ui/separator';
import { 
  AlertTriangle, 
  FileText, 
  Shield, 
  Clock,
  TrendingDown,
  DollarSign,
  BarChart3
} from 'lucide-react';
import { RiskDisclosure, SuitabilityAssessment } from '../../types';

interface RiskDisclosureModalProps {
  isOpen: boolean;
  onClose: () => void;
  onAccept: () => void;
  riskDisclosure: RiskDisclosure;
  suitabilityAssessment?: SuitabilityAssessment;
  investmentType: string;
  investmentAmount?: number;
  loading?: boolean;
}

export function RiskDisclosureModal({
  isOpen,
  onClose,
  onAccept,
  riskDisclosure,
  suitabilityAssessment,
  investmentType,
  investmentAmount,
  loading = false
}: RiskDisclosureModalProps) {
  const [acknowledged, setAcknowledged] = useState(false);
  const [readingTime, setReadingTime] = useState(0);
  const [hasScrolledToBottom, setHasScrolledToBottom] = useState(false);

  useEffect(() => {
    if (isOpen) {
      setAcknowledged(false);
      setReadingTime(0);
      setHasScrolledToBottom(false);
      
      // Start reading timer
      const interval = setInterval(() => {
        setReadingTime(prev => prev + 1);
      }, 1000);

      return () => clearInterval(interval);
    }
  }, [isOpen]);

  const handleScroll = (event: React.UIEvent<HTMLDivElement>) => {
    const { scrollTop, scrollHeight, clientHeight } = event.currentTarget;
    if (scrollTop + clientHeight >= scrollHeight - 10) {
      setHasScrolledToBottom(true);
    }
  };

  const getRiskLevelColor = (riskLevel: string) => {
    switch (riskLevel.toLowerCase()) {
      case 'low':
        return 'bg-green-100 text-green-800 border-green-300';
      case 'moderate':
        return 'bg-yellow-100 text-yellow-800 border-yellow-300';
      case 'high':
        return 'bg-orange-100 text-orange-800 border-orange-300';
      case 'very_high':
        return 'bg-red-100 text-red-800 border-red-300';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-300';
    }
  };

  const getSuitabilityColor = (rating: string) => {
    switch (rating) {
      case 'SUITABLE':
        return 'text-green-600';
      case 'SUITABLE_WITH_CAUTION':
        return 'text-yellow-600';
      case 'MARGINALLY_SUITABLE':
        return 'text-orange-600';
      case 'NOT_SUITABLE':
        return 'text-red-600';
      default:
        return 'text-gray-600';
    }
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  const canAccept = acknowledged && hasScrolledToBottom && readingTime >= 30; // Minimum 30 seconds reading

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] flex flex-col">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <AlertTriangle className="h-5 w-5 text-orange-500" />
            {riskDisclosure.disclosure.title}
          </DialogTitle>
          <DialogDescription>
            Please read this important risk disclosure carefully before proceeding with your investment.
          </DialogDescription>
          <div className="flex items-center gap-4 text-sm text-muted-foreground">
            <div className="flex items-center gap-1">
              <Clock className="h-4 w-4" />
              Reading time: {formatTime(readingTime)}
            </div>
            <div className="flex items-center gap-1">
              <FileText className="h-4 w-4" />
              Investment: {investmentType}
            </div>
            {investmentAmount && (
              <div className="flex items-center gap-1">
                <DollarSign className="h-4 w-4" />
                Amount: â‚¹{investmentAmount.toLocaleString()}
              </div>
            )}
          </div>
        </DialogHeader>

        <div className="flex-1 overflow-hidden">
          {/* Suitability Assessment (if available) */}
          {suitabilityAssessment && (
            <div className="mb-6">
              <Alert variant={suitabilityAssessment.suitable ? "default" : "destructive"}>
                <Shield className="h-4 w-4" />
                <AlertTitle>
                  Suitability Assessment: 
                  <span className={`ml-2 ${getSuitabilityColor(suitabilityAssessment.overall_rating)}`}>
                    {suitabilityAssessment.overall_rating.replace('_', ' ')}
                  </span>
                </AlertTitle>
                <AlertDescription>
                  <div className="mt-2 space-y-2">
                    <div className="flex items-center gap-2">
                      <BarChart3 className="h-4 w-4" />
                      <span>Suitability Score: {suitabilityAssessment.suitability_score}%</span>
                    </div>
                    
                    {suitabilityAssessment.warnings.length > 0 && (
                      <div className="mt-2">
                        <strong>Warnings:</strong>
                        <ul className="mt-1 list-disc list-inside text-sm">
                          {suitabilityAssessment.warnings.map((warning, index) => (
                            <li key={index}>{warning}</li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {suitabilityAssessment.restrictions.length > 0 && (
                      <div className="mt-2">
                        <strong>Restrictions:</strong>
                        <ul className="mt-1 list-disc list-inside text-sm">
                          {suitabilityAssessment.restrictions.map((restriction, index) => (
                            <li key={index}>{restriction}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                </AlertDescription>
              </Alert>
            </div>
          )}

          <ScrollArea 
            className="h-96 pr-4" 
            onScrollCapture={handleScroll}
          >
            <div className="space-y-6">
              {/* Regulatory Warning */}
              <Alert>
                <AlertTriangle className="h-4 w-4" />
                <AlertTitle>SEBI Regulatory Warning</AlertTitle>
                <AlertDescription className="text-base font-medium mt-2">
                  {riskDisclosure.disclosure.regulatory_warning}
                </AlertDescription>
              </Alert>

              {/* Key Risks */}
              <div>
                <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                  <TrendingDown className="h-5 w-5 text-red-500" />
                  Key Risk Factors
                </h3>
                <div className="space-y-3">
                  {riskDisclosure.disclosure.key_risks.map((risk, index) => (
                    <Alert key={index} variant="destructive">
                      <AlertDescription>{risk}</AlertDescription>
                    </Alert>
                  ))}
                </div>
              </div>

              {/* Knowledge Requirements */}
              <div>
                <h3 className="text-lg font-semibold mb-3">Minimum Knowledge Required</h3>
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <p className="text-blue-900">{riskDisclosure.disclosure.minimum_knowledge_required}</p>
                </div>
              </div>

              {/* Personal Recommendations */}
              {riskDisclosure.disclosure.personal_recommendation && (
                <div>
                  <h3 className="text-lg font-semibold mb-3">Personal Recommendation</h3>
                  <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                    <p className="text-green-900">{riskDisclosure.disclosure.personal_recommendation}</p>
                  </div>
                </div>
              )}

              {/* Experience Warning */}
              {riskDisclosure.disclosure.experience_warning && (
                <Alert>
                  <AlertTriangle className="h-4 w-4" />
                  <AlertTitle>Experience Advisory</AlertTitle>
                  <AlertDescription>{riskDisclosure.disclosure.experience_warning}</AlertDescription>
                </Alert>
              )}

              {/* Additional Suitability Recommendations */}
              {suitabilityAssessment && suitabilityAssessment.recommendations.length > 0 && (
                <div>
                  <h3 className="text-lg font-semibold mb-3">Recommendations</h3>
                  <div className="space-y-2">
                    {suitabilityAssessment.recommendations.map((recommendation, index) => (
                      <div key={index} className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                        <p className="text-yellow-900">{recommendation}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* AI System Limitations */}
              <div>
                <h3 className="text-lg font-semibold mb-3">AI System Limitations</h3>
                <Alert>
                  <AlertDescription>
                    <ul className="space-y-2 list-disc list-inside">
                      <li>AI recommendations are based on historical data and may not predict future market conditions</li>
                      <li>Algorithmic models cannot account for unprecedented events or market disruptions</li>
                      <li>Technology failures may affect recommendation quality or system availability</li>
                      <li>Models may exhibit biases present in training data or market patterns</li>
                      <li>Human judgment and professional advice remain important for investment decisions</li>
                    </ul>
                  </AlertDescription>
                </Alert>
              </div>

              {/* Final Warning */}
              <Alert variant="destructive">
                <AlertTriangle className="h-4 w-4" />
                <AlertTitle>Important Final Warning</AlertTitle>
                <AlertDescription className="space-y-2">
                  <p className="font-medium">
                    By proceeding, you acknowledge that:
                  </p>
                  <ul className="list-disc list-inside space-y-1">
                    <li>You have read and understood all risks mentioned above</li>
                    <li>You are financially capable of bearing potential losses</li>
                    <li>You will not rely solely on AI recommendations for investment decisions</li>
                    <li>You understand this is not a guarantee of returns</li>
                    <li>You will seek professional advice when needed</li>
                  </ul>
                </AlertDescription>
              </Alert>

              {/* Scroll indicator */}
              {!hasScrolledToBottom && (
                <div className="text-center py-4">
                  <Badge variant="outline" className="animate-pulse">
                    Please scroll to the bottom to continue
                  </Badge>
                </div>
              )}
            </div>
          </ScrollArea>
        </div>

        <Separator className="my-4" />

        <DialogFooter className="flex-col space-y-4">
          <div className="flex items-start space-x-3">
            <Checkbox
              id="acknowledge"
              checked={acknowledged}
              onCheckedChange={setAcknowledged}
              className="mt-1"
            />
            <div className="space-y-1 leading-none">
              <label
                htmlFor="acknowledge"
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer"
              >
                Risk Acknowledgment
              </label>
              <p className="text-sm text-muted-foreground">
                I acknowledge that I have carefully read, understood, and accept all the risks mentioned in this disclosure.
                I understand that investments can result in losses and that past performance does not guarantee future results.
              </p>
            </div>
          </div>

          <div className="flex justify-between items-center w-full">
            <div className="flex items-center gap-4 text-sm text-muted-foreground">
              {readingTime < 30 && (
                <Badge variant="outline" className="text-orange-600 border-orange-300">
                  Minimum 30 seconds reading required
                </Badge>
              )}
              {!hasScrolledToBottom && (
                <Badge variant="outline" className="text-blue-600 border-blue-300">
                  Please read the complete document
                </Badge>
              )}
            </div>
            
            <div className="flex gap-2">
              <Button variant="outline" onClick={onClose} disabled={loading}>
                Cancel Investment
              </Button>
              <Button
                onClick={onAccept}
                disabled={!canAccept || loading}
                variant={suitabilityAssessment?.suitable ? "default" : "destructive"}
              >
                {loading ? 'Processing...' : 'Accept & Proceed'}
              </Button>
            </div>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}