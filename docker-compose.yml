version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: sharewise_db
    environment:
      POSTGRES_DB: sharewise_db
      POSTGRES_USER: sharewise_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-sharewise_pass123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./setup_db.sql:/docker-entrypoint-initdb.d/setup.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sharewise_user -d sharewise_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sharewise_network

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: sharewise_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sharewise_network

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sharewise_backend
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2
      "
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DATABASE_URL=postgresql://sharewise_user:${DB_PASSWORD:-sharewise_pass123}@db:5432/sharewise_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sharewise_network

  # Celery Worker for ML Training
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.ml
    container_name: sharewise_celery_worker
    command: celery -A config worker -l info -c 4
    volumes:
      - ./backend:/app
      - media_volume:/app/media
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DATABASE_URL=postgresql://sharewise_user:${DB_PASSWORD:-sharewise_pass123}@db:5432/sharewise_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - DJANGO_SETTINGS_MODULE=config.settings.production
    depends_on:
      - db
      - redis
      - backend
    networks:
      - sharewise_network

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sharewise_celery_beat
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DATABASE_URL=postgresql://sharewise_user:${DB_PASSWORD:-sharewise_pass123}@db:5432/sharewise_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - DJANGO_SETTINGS_MODULE=config.settings.production
    depends_on:
      - db
      - redis
      - backend
    networks:
      - sharewise_network

  # Flower - Celery Monitoring
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sharewise_flower
    command: celery -A config flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - redis
      - celery_worker
    networks:
      - sharewise_network

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000/api}
        - REACT_APP_WS_URL=${REACT_APP_WS_URL:-ws://localhost:8000/ws}
    container_name: sharewise_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000/api}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-ws://localhost:8000/ws}
    depends_on:
      - backend
    networks:
      - sharewise_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sharewise_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/static
      - media_volume:/media
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - sharewise_network

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  sharewise_network:
    driver: bridge